[
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "CORSMiddleware",
        "importPath": "fastapi.middleware.cors",
        "description": "fastapi.middleware.cors",
        "isExtraImport": true,
        "detail": "fastapi.middleware.cors",
        "documentation": {}
    },
    {
        "label": "AutoTokenizer",
        "importPath": "transformers",
        "description": "transformers",
        "isExtraImport": true,
        "detail": "transformers",
        "documentation": {}
    },
    {
        "label": "AutoModelForTokenClassification",
        "importPath": "transformers",
        "description": "transformers",
        "isExtraImport": true,
        "detail": "transformers",
        "documentation": {}
    },
    {
        "label": "torch",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "torch",
        "description": "torch",
        "detail": "torch",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "EmailStr",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "field_validator",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "field_serializer",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "app.main",
        "description": "app.main",
        "peekOfCode": "app = FastAPI()\n# CORS configuration\napp.add_middleware(CORSMiddleware,\n                   allow_origins=[\"*\"],\n                   allow_credentials=True,\n                   allow_methods=[\"*\"],\n                   allow_headers=[\"*\"])\n# model\nmodel_name = \"Mhammad2023/bert-finetuned-ner\"\ntokenizer = AutoTokenizer.from_pretrained(model_name)",
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "model_name",
        "kind": 5,
        "importPath": "app.main",
        "description": "app.main",
        "peekOfCode": "model_name = \"Mhammad2023/bert-finetuned-ner\"\ntokenizer = AutoTokenizer.from_pretrained(model_name)\nmodel = AutoModelForTokenClassification.from_pretrained(model_name, from_tf=True)\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Hello in our async FastAPI app for named entity recognition!\"}\n@app.post(\"/token_classification\", response_model=List[Entity])\nasync def token_classification(request: TokenClassificationRequest):\n    inputs = tokenizer(\n        request.text,",
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "tokenizer",
        "kind": 5,
        "importPath": "app.main",
        "description": "app.main",
        "peekOfCode": "tokenizer = AutoTokenizer.from_pretrained(model_name)\nmodel = AutoModelForTokenClassification.from_pretrained(model_name, from_tf=True)\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Hello in our async FastAPI app for named entity recognition!\"}\n@app.post(\"/token_classification\", response_model=List[Entity])\nasync def token_classification(request: TokenClassificationRequest):\n    inputs = tokenizer(\n        request.text,\n        return_tensors=\"pt\",",
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "app.main",
        "description": "app.main",
        "peekOfCode": "model = AutoModelForTokenClassification.from_pretrained(model_name, from_tf=True)\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Hello in our async FastAPI app for named entity recognition!\"}\n@app.post(\"/token_classification\", response_model=List[Entity])\nasync def token_classification(request: TokenClassificationRequest):\n    inputs = tokenizer(\n        request.text,\n        return_tensors=\"pt\",\n        truncation=True,",
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "TokenClassificationRequest",
        "kind": 6,
        "importPath": "app.schemas",
        "description": "app.schemas",
        "peekOfCode": "class TokenClassificationRequest(BaseModel):\n    text: str = Field(..., min_length=1, max_length=5000)\n# class TokenClassificationResponse(BaseModel):\n#     text: str\n#     tokens: List[str]\n#     labels: List[str]\n#     scores: List[float]\n#     start: List[int]\n#     end: List[int]\n#     model_config = ConfigDict(from_attributes=True)",
        "detail": "app.schemas",
        "documentation": {}
    },
    {
        "label": "Entity",
        "kind": 6,
        "importPath": "app.schemas",
        "description": "app.schemas",
        "peekOfCode": "class Entity(BaseModel):\n    entity_group: str\n    score: float\n    word: str\n    start: int\n    end: int",
        "detail": "app.schemas",
        "documentation": {}
    },
    {
        "label": "group_entities",
        "kind": 2,
        "importPath": "app.utils",
        "description": "app.utils",
        "peekOfCode": "def group_entities(tokens, labels, scores, starts, ends, text):\n    entities = []\n    current_entity = None\n    for i, label in enumerate(labels):\n        if label == \"O\":\n            if current_entity:\n                entities.append(current_entity)\n                current_entity = None\n            continue\n        tag, entity_type = label.split(\"-\")",
        "detail": "app.utils",
        "documentation": {}
    }
]